name: CI/CD Workflow

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./app

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: "3.10"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      run: |
        pytest

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - uses: docker/login-action@v2 
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Set up GCR authentication
      run: |
        echo ${{ secrets.GCP_SA_KEY }} | gcloud auth activate-service-account --key-file=-
        gcloud config set project ${{ secrets.GKE_PROJECT }}
        gcloud auth configure-docker gcr.io
    
    - name: Build and push Docker image to GCR
      run: |
        IMAGE_NAME=gcr.io/${{ secrets.GKE_PROJECT }}/hello-gitops
        docker tag hello-gitops:${{ github.sha }} $IMAGE_NAME:${{ github.sha }}
        docker push $IMAGE_NAME:${{ github.sha }}
        docker push $IMAGE_NAME:latest

  deploy: 
    name: Deploy to GKE (Blue/Green)
    runs-on: ubuntu-latest
    needs: build
    env:
      PROJECT_ID: ${{ secrets.GCP_PROJECT }}
      GKE_CLUSTER: autopilot-cluster-1
      GKE_REGION: ${{ secrets.GKE_ZONE }}

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v0
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v0

    - name: Get the GKE credentials
      run: |
        gcloud container clusters get-credentials "$GKE_CLUSTER" --region "$GKE_REGION"

    - name: Deploy Blue or Green
      env:
        NEW_NAMESPACE: python-app-blue
      run: |
        kubectl apply -k k8s/overlays/${{ env.NEW_NAMESPACE }}

    - name: Remove old namespace
      run: |
        namespacePresentOld=`kubectl get ns | grep ${{ env.OLD_NAMESPACE }} | wc -l`
        if [ $namespacePresentOld -eq 1 ]
        then
          kubectl delete ns ${{ env.OLD_NAMESPACE }} --wait=true
        fi
